// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LakshyaP06

//@version=5
indicator("Advanced ASX Stock Prediction with Forecast", overlay=true, max_bars_back=500)

// ═══════════════════════════════════════════════════════════════════════════════
// INPUT SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════

// Moving Averages
emaShortLength = input.int(9, "EMA Short Length", minval=1, group="Moving Averages")
emaLongLength = input.int(21, "EMA Long Length", minval=1, group="Moving Averages")
smaLength = input.int(50, "SMA Length", minval=1, group="Moving Averages")
sma200Length = input.int(200, "SMA 200 Length", minval=1, group="Moving Averages")

// RSI Settings
rsiLength = input.int(14, "RSI Length", minval=1, group="RSI")
rsiOverbought = input.int(70, "RSI Overbought", minval=50, maxval=100, group="RSI")
rsiOversold = input.int(30, "RSI Oversold", minval=0, maxval=50, group="RSI")

// MACD Settings
macdFast = input.int(12, "MACD Fast Length", minval=1, group="MACD")
macdSlow = input.int(26, "MACD Slow Length", minval=1, group="MACD")
macdSignal = input.int(9, "MACD Signal Length", minval=1, group="MACD")

// Bollinger Bands
bbLength = input.int(20, "Bollinger Bands Length", minval=1, group="Bollinger Bands")
bbMult = input.float(2.0, "Bollinger Bands Multiplier", minval=0.1, step=0.1, group="Bollinger Bands")

// ATR Settings
atrLength = input.int(14, "ATR Length", minval=1, group="ATR & Volatility")
atrMultiplier = input.float(1.5, "ATR Multiplier for Stops", minval=0.1, step=0.1, group="ATR & Volatility")

// Volume Settings
volumeMaLength = input.int(20, "Volume MA Length", minval=1, group="Volume")

// Prediction Settings
predictionStrength = input.int(60, "Prediction Signal Strength", minval=0, maxval=100, group="Prediction Settings")
showPredictionLabels = input.bool(true, "Show Prediction Labels", group="Prediction Settings")
showSupportResistance = input.bool(true, "Show Support/Resistance", group="Prediction Settings")

// Forecast Settings
forecastLength = input.int(5, "Forecast Lookback Periods", minval=2, maxval=50, group="Next Day Forecast")
showForecastLine = input.bool(true, "Show Forecast Line", group="Next Day Forecast")
forecastMethod = input.string("Combined", "Forecast Method", 
                               options=["Linear Regression", "EMA Projection", "Combined"], 
                               group="Next Day Forecast")

// ═══════════════════════════════════════════════════════════════════════════════
// CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════

// Moving Averages
emaShort = ta.ema(close, emaShortLength)
emaLong = ta.ema(close, emaLongLength)
sma50 = ta.sma(close, smaLength)
sma200 = ta.sma(close, sma200Length)

// RSI
rsi = ta.rsi(close, rsiLength)

// MACD
[macdLine, signalLine, histLine] = ta.macd(close, macdFast, macdSlow, macdSignal)

// Bollinger Bands
bbBasis = ta.sma(close, bbLength)
bbDev = bbMult * ta.stdev(close, bbLength)
bbUpper = bbBasis + bbDev
bbLower = bbBasis - bbDev

// ATR
atr = ta.atr(atrLength)

// Volume Analysis
volumeMa = ta.sma(volume, volumeMaLength)
volumeIncreasing = volume > volumeMa

// ADX for Trend Strength
[diPlus, diMinus, adx] = ta.dmi(14, 14)
strongTrend = adx > 25

// Stochastic
stochK = ta.stoch(close, high, low, 14)
stochD = ta.sma(stochK, 3)

// ═══════════════════════════════════════════════════════════════════════════════
// NEXT DAY PRICE FORECAST
// ═══════════════════════════════════════════════════════════════════════════════

// Method 1: Linear Regression Forecast
linearRegSlope = ta.linreg(close, forecastLength, 0) - ta.linreg(close, forecastLength, 1)
lrForecast = close + linearRegSlope

// Method 2: EMA Momentum Projection
emaSlope = emaShort - emaShort[1]
emaMomentum = ta.ema(emaSlope, 5)
emaForecast = close + emaMomentum

// Method 3: Price Rate of Change
roc = ta.roc(close, forecastLength)
rocForecast = close * (1 + (roc / 100))

// Method 4: ATR-based Range Forecast
trendDirection = emaShort > emaLong ? 1 : -1
atrForecast = close + (atr * 0.5 * trendDirection)

// Method 5: Bollinger Band Mean Reversion
bbPosition = (close - bbLower) / (bbUpper - bbLower)
bbMeanReversion = bbPosition > 0.8 ? close - (atr * 0.3) : 
                   bbPosition < 0.2 ? close + (atr * 0.3) : close

// Combined Forecast (weighted average)
combinedForecast = forecastMethod == "Linear Regression" ? lrForecast :
                   forecastMethod == "EMA Projection" ? emaForecast :
                   (lrForecast * 0.3 + emaForecast * 0.25 + rocForecast * 0.2 + 
                    atrForecast * 0.15 + bbMeanReversion * 0.1)

// Calculate expected change
forecastChange = combinedForecast - close
forecastChangePercent = (forecastChange / close) * 100

// Confidence Score (based on trend strength, volatility, and alignment)
methodAlignment = math.abs(lrForecast - emaForecast) / close < 0.02 ? 20 : 0
volatilityScore = atr / close < 0.03 ? 20 : atr / close < 0.05 ? 10 : 0
trendScore = strongTrend ? 20 : 10
volumeScore = volumeIncreasing ? 20 : 10
consistencyScore = math.abs(close - close[1]) / close < 0.02 ? 20 : 10

confidenceScore = methodAlignment + volatilityScore + trendScore + volumeScore + consistencyScore

// Forecast Range (High/Low estimates)
forecastHigh = combinedForecast + (atr * 0.5)
forecastLow = combinedForecast - (atr * 0.5)

// ═══════════════════════════════════════════════════════════════════════════════
// TREND ANALYSIS
// ═══════════════════════════════════════════════════════════════════════════════

// Primary Trend
uptrend = emaShort > emaLong and close > sma50
downtrend = emaShort < emaLong and close < sma50

// Long-term Trend
longTermBullish = close > sma200
longTermBearish = close < sma200

// Trend Changes
emaCrossUp = ta.crossover(emaShort, emaLong)
emaCrossDown = ta.crossunder(emaShort, emaLong)

// ═══════════════════════════════════════════════════════════════════════════════
// SIGNAL GENERATION
// ═══════════════════════════════════════════════════════════════════════════════

// Bullish Signals
bullishRsi = rsi < rsiOversold and rsi > rsi[1]
bullishMacd = ta.crossover(macdLine, signalLine)
bullishBB = close < bbLower and close > close[1]
bullishStoch = ta.crossover(stochK, stochD) and stochK < 20
bullishVolume = volumeIncreasing and close > open

// Bearish Signals
bearishRsi = rsi > rsiOverbought and rsi < rsi[1]
bearishMacd = ta.crossunder(macdLine, signalLine)
bearishBB = close > bbUpper and close < close[1]
bearishStoch = ta.crossunder(stochK, stochD) and stochK > 80
bearishVolume = volumeIncreasing and close < open

// Count Signals
bullishScore = (bullishRsi ? 20 : 0) + (bullishMacd ? 20 : 0) + (bullishBB ? 15 : 0) + 
               (bullishStoch ? 15 : 0) + (emaCrossUp ? 20 : 0) + (bullishVolume ? 10 : 0)

bearishScore = (bearishRsi ? 20 : 0) + (bearishMacd ? 20 : 0) + (bearishBB ? 15 : 0) + 
               (bearishStoch ? 15 : 0) + (emaCrossDown ? 20 : 0) + (bearishVolume ? 10 : 0)

// Final Prediction Signals
strongBuySignal = bullishScore >= predictionStrength and uptrend and strongTrend
buySignal = bullishScore >= predictionStrength and uptrend

strongSellSignal = bearishScore >= predictionStrength and downtrend and strongTrend
sellSignal = bearishScore >= predictionStrength and downtrend

// ═══════════════════════════════════════════════════════════════════════════════
// SUPPORT AND RESISTANCE
// ═══════════════════════════════════════════════════════════════════════════════

// Pivot Points (for ASX session)
pivotHigh = ta.pivothigh(high, 5, 5)
pivotLow = ta.pivotlow(low, 5, 5)

// Store support and resistance levels
var float resistance = na
var float support = na

if not na(pivotHigh)
    resistance := pivotHigh

if not na(pivotLow)
    support := pivotLow

// ═══════════════════════════════════════════════════════════════════════════════
// PLOTTING
// ═══════════════════════════════════════════════════════════════════════════════

// Moving Averages
plot(emaShort, "EMA Short", color=color.new(color.blue, 0), linewidth=2)
plot(emaLong, "EMA Long", color=color.new(color.orange, 0), linewidth=2)
plot(sma50, "SMA 50", color=color.new(color.purple, 0), linewidth=1)
plot(sma200, "SMA 200", color=color.new(color.gray, 0), linewidth=2)

// Bollinger Bands
p1 = plot(bbUpper, "BB Upper", color=color.new(color.teal, 70))
p2 = plot(bbLower, "BB Lower", color=color.new(color.teal, 70))
fill(p1, p2, color=color.new(color.teal, 90), title="BB Fill")

// Support and Resistance
plot(showSupportResistance ? resistance : na, "Resistance", color=color.new(color.red, 0), 
     linewidth=1, style=plot.style_circles)
plot(showSupportResistance ? support : na, "Support", color=color.new(color.green, 0), 
     linewidth=1, style=plot.style_circles)

// Forecast Line
forecastColor = forecastChangePercent > 0 ? color.new(color.lime, 30) : color.new(color.red, 30)
plot(showForecastLine ? combinedForecast : na, "Next Day Forecast", 
     color=forecastColor, linewidth=3, style=plot.style_cross)

// Forecast Range
plot(showForecastLine ? forecastHigh : na, "Forecast High", 
     color=color.new(color.green, 70), linewidth=1, style=plot.style_circles)
plot(showForecastLine ? forecastLow : na, "Forecast Low", 
     color=color.new(color.red, 70), linewidth=1, style=plot.style_circles)

// Buy/Sell Signals
plotshape(strongBuySignal, "Strong Buy", shape.labelup, location.belowbar, 
          color=color.new(color.green, 0), text="STRONG BUY", textcolor=color.white, size=size.normal)
plotshape(buySignal and not strongBuySignal, "Buy", shape.triangleup, location.belowbar, 
          color=color.new(color.lime, 0), text="BUY", textcolor=color.white, size=size.small)

plotshape(strongSellSignal, "Strong Sell", shape.labeldown, location.abovebar, 
          color=color.new(color.red, 0), text="STRONG SELL", textcolor=color.white, size=size.normal)
plotshape(sellSignal and not strongSellSignal, "Sell", shape.triangledown, location.abovebar, 
          color=color.new(color.orange, 0), text="SELL", textcolor=color.white, size=size.small)

// ATR-based Stop Loss levels
buyStopLevel = close - (atr * atrMultiplier)
sellStopLevel = close + (atr * atrMultiplier)

plot(strongBuySignal or buySignal ? buyStopLevel : na, "Buy Stop Loss", 
     color=color.new(color.red, 0), linewidth=1, style=plot.style_cross)
plot(strongSellSignal or sellSignal ? sellStopLevel : na, "Sell Stop Loss", 
     color=color.new(color.green, 0), linewidth=1, style=plot.style_cross)

// ═══════════════════════════════════════════════════════════════════════════════
// BACKGROUND COLORING
// ═══════════════════════════════════════════════════════════════════════════════

bgColor = uptrend and strongTrend ? color.new(color.green, 95) : 
          downtrend and strongTrend ? color.new(color.red, 95) : 
          color.new(color.gray, 98)
bgcolor(bgColor, title="Trend Background")

// ═══════════════════════════════════════════════════════════════════════════════
// ALERTS
// ═══════════════════════════════════════════════════════════════════════════════

alertcondition(strongBuySignal, title="Strong Buy Alert", 
               message="Strong BUY signal detected! Score: {{plot_0}}")
alertcondition(buySignal, title="Buy Alert", 
               message="BUY signal detected! Score: {{plot_0}}")
alertcondition(strongSellSignal, title="Strong Sell Alert", 
               message="Strong SELL signal detected! Score: {{plot_0}}")
alertcondition(sellSignal, title="Sell Alert", 
               message="SELL signal detected! Score: {{plot_0}}")
alertcondition(emaCrossUp, title="Bullish EMA Cross", 
               message="Bullish EMA crossover detected")
alertcondition(emaCrossDown, title="Bearish EMA Cross", 
               message="Bearish EMA crossunder detected")

// Forecast Alerts
bigMoveUp = forecastChangePercent > 2 and confidenceScore > 60
bigMoveDown = forecastChangePercent < -2 and confidenceScore > 60
alertcondition(bigMoveUp, title="Forecast: Big Move Up", 
               message="Next day forecast predicts +{{plot_0}}% move with high confidence")
alertcondition(bigMoveDown, title="Forecast: Big Move Down", 
               message="Next day forecast predicts {{plot_0}}% move with high confidence")

// ═══════════════════════════════════════════════════════════════════════════════
// TABLE - ENHANCED PREDICTION DASHBOARD WITH FORECAST
// ═══════════════════════════════════════════════════════════════════════════════

if showPredictionLabels
    var table dashboard = table.new(position.top_right, 2, 13, 
                                     bgcolor=color.new(color.black, 80), 
                                     border_width=2, border_color=color.gray)
    
    // Headers
    table.cell(dashboard, 0, 0, "Indicator", text_color=color.white, 
               bgcolor=color.new(color.gray, 70), text_size=size.normal)
    table.cell(dashboard, 1, 0, "Value", text_color=color.white, 
               bgcolor=color.new(color.gray, 70), text_size=size.normal)
    
    // Current Price
    table.cell(dashboard, 0, 1, "Current Price", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 1, str.tostring(math.round(close, 2)), 
               text_color=color.yellow, text_size=size.small)
    
    // === FORECAST SECTION ===
    table.cell(dashboard, 0, 2, "━━━ FORECAST ━━━", text_color=color.aqua, 
               bgcolor=color.new(color.blue, 85), text_size=size.small)
    table.cell(dashboard, 1, 2, "━━━━━━━━━━", text_color=color.aqua, 
               bgcolor=color.new(color.blue, 85), text_size=size.small)
    
    // Next Day Prediction
    forecastDisplayColor = forecastChangePercent > 0 ? color.lime : color.red
    table.cell(dashboard, 0, 3, "Next Day Est.", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 3, str.tostring(math.round(combinedForecast, 2)), 
               text_color=forecastDisplayColor, text_size=size.normal)
    
    // Expected Change $
    changeSymbol = forecastChange > 0 ? "+" : ""
    table.cell(dashboard, 0, 4, "Change ($)", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 4, changeSymbol + str.tostring(math.round(forecastChange, 3)), 
               text_color=forecastDisplayColor, text_size=size.small)
    
    // Expected Change %
    table.cell(dashboard, 0, 5, "Change (%)", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 5, changeSymbol + str.tostring(math.round(forecastChangePercent, 2)) + "%", 
               text_color=forecastDisplayColor, text_size=size.normal)
    
    // Forecast Range
    table.cell(dashboard, 0, 6, "Range", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 6, str.tostring(math.round(forecastLow, 2)) + " - " + 
               str.tostring(math.round(forecastHigh, 2)), 
               text_color=color.orange, text_size=size.small)
    
    // Confidence Score
    confColor = confidenceScore >= 70 ? color.lime : confidenceScore >= 50 ? color.yellow : color.orange
    table.cell(dashboard, 0, 7, "Confidence", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 7, str.tostring(confidenceScore) + "%", 
               text_color=confColor, text_size=size.small)
    
    // === CURRENT INDICATORS ===
    table.cell(dashboard, 0, 8, "━━ INDICATORS ━━", text_color=color.aqua, 
               bgcolor=color.new(color.purple, 85), text_size=size.small)
    table.cell(dashboard, 1, 8, "━━━━━━━━━━", text_color=color.aqua, 
               bgcolor=color.new(color.purple, 85), text_size=size.small)
    
    // RSI
    rsiColor = rsi > rsiOverbought ? color.red : rsi < rsiOversold ? color.green : color.yellow
    table.cell(dashboard, 0, 9, "RSI", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 9, str.tostring(math.round(rsi, 2)), 
               text_color=rsiColor, text_size=size.small)
    
    // Trend
    trendText = uptrend ? "BULLISH" : downtrend ? "BEARISH" : "NEUTRAL"
    trendColor = uptrend ? color.green : downtrend ? color.red : color.yellow
    table.cell(dashboard, 0, 10, "Trend", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 10, trendText, text_color=trendColor, text_size=size.small)
    
    // Bull/Bear Scores
    table.cell(dashboard, 0, 11, "Bull/Bear", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 11, str.tostring(bullishScore) + " / " + str.tostring(bearishScore), 
               text_color=color.white, text_size=size.small)
    
    // Volume Status
    volStatus = volumeIncreasing ? "HIGH" : "LOW"
    volColor = volumeIncreasing ? color.green : color.gray
    table.cell(dashboard, 0, 12, "Volume", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 12, volStatus, text_color=volColor, text_size=size.small)
